<?php
/**
 * AIPG_Utils Class
 *
 * Utility functions for logging, helpers, and common operations.
 *
 * @package AI_Post_Generator
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Class AIPG_Utils
 *
 * Provides utility functions for the plugin.
 */
class AIPG_Utils {

	/**
	 * Constructor.
	 */
	public function __construct() {
		// Class initialization.
	}

	/**
	 * Log a generation event.
	 *
	 * @param string $topic       The topic that was generated.
	 * @param int    $post_count  Number of posts created.
	 * @param int    $token_usage Total tokens used.
	 * @return int|false Insert ID on success, false on failure.
	 */
	public function log_generation( $topic, $post_count, $token_usage ) {
		global $wpdb;

		$table_name = $wpdb->prefix . 'aipg_logs';

		$result = $wpdb->insert(
			$table_name,
			array(
				'topic'       => $topic,
				'post_count'  => $post_count,
				'token_usage' => $token_usage,
				'created_at'  => current_time( 'mysql' ),
			),
			array( '%s', '%d', '%d', '%s' )
		);

		return $result ? $wpdb->insert_id : false;
	}

	/**
	 * Get generation logs.
	 *
	 * @param int $limit Number of logs to retrieve (default 50).
	 * @return array Array of log objects.
	 */
	public function get_logs( $limit = 50 ) {
		global $wpdb;

		$table_name = $wpdb->prefix . 'aipg_logs';
		$limit      = absint( $limit );

		// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
		$logs = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $table_name ORDER BY created_at DESC LIMIT %d", $limit ) );

		return $logs ? $logs : array();
	}

	/**
	 * Get a single log by ID.
	 *
	 * @param int $log_id Log ID.
	 * @return object|null Log object or null if not found.
	 */
	public function get_log( $log_id ) {
		global $wpdb;

		$table_name = $wpdb->prefix . 'aipg_logs';

		// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
		$log = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $table_name WHERE id = %d", $log_id ) );

		return $log;
	}

	/**
	 * Delete old logs.
	 *
	 * @param int $days Delete logs older than X days (default 90).
	 * @return int|false Number of rows deleted or false on failure.
	 */
	public function delete_old_logs( $days = 90 ) {
		global $wpdb;

		$table_name = $wpdb->prefix . 'aipg_logs';
		$days       = absint( $days );

		// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
		$result = $wpdb->query(
			$wpdb->prepare(
				"DELETE FROM $table_name WHERE created_at < DATE_SUB(NOW(), INTERVAL %d DAY)",
				$days
			)
		);

		return $result;
	}

	/**
	 * Clear all logs.
	 *
	 * @return int|false Number of rows deleted or false on failure.
	 */
	public function clear_all_logs() {
		global $wpdb;

		$table_name = $wpdb->prefix . 'aipg_logs';

		// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
		$result = $wpdb->query( "TRUNCATE TABLE $table_name" );

		return $result;
	}

	/**
	 * Sanitize and validate topic input.
	 *
	 * @param string $topic Raw topic input.
	 * @return string Sanitized topic.
	 */
	public function sanitize_topic( $topic ) {
		return sanitize_text_field( trim( $topic ) );
	}

	/**
	 * Validate post count.
	 *
	 * @param int $count Raw count input.
	 * @return int Valid count between 10 and 100.
	 */
	public function validate_post_count( $count ) {
		$count = absint( $count );

		if ( $count < 10 ) {
			return 10;
		}

		if ( $count > 100 ) {
			return 100;
		}

		return $count;
	}

	/**
	 * Check if a post was generated by AI.
	 *
	 * @param int $post_id Post ID.
	 * @return bool True if generated by AI, false otherwise.
	 */
	public function is_ai_generated( $post_id ) {
		return (bool) get_post_meta( $post_id, '_aipg_generated', true );
	}

	/**
	 * Get AI generation info for a post.
	 *
	 * @param int $post_id Post ID.
	 * @return array|null Array with topic and date or null if not AI generated.
	 */
	public function get_generation_info( $post_id ) {
		if ( ! $this->is_ai_generated( $post_id ) ) {
			return null;
		}

		return array(
			'topic' => get_post_meta( $post_id, '_aipg_topic', true ),
			'date'  => get_post_meta( $post_id, '_aipg_generated_date', true ),
		);
	}

	/**
	 * Format token usage for display.
	 *
	 * @param int $tokens Token count.
	 * @return string Formatted string.
	 */
	public function format_token_usage( $tokens ) {
		return number_format( $tokens ) . ' ' . __( 'tokens', 'ai-post-generator' );
	}

	/**
	 * Get plugin statistics.
	 *
	 * @return array Statistics array.
	 */
	public function get_statistics() {
		global $wpdb;

		$table_name = $wpdb->prefix . 'aipg_logs';

		// Get total posts generated.
		$total_posts = $wpdb->get_var(
			// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
			"SELECT SUM(post_count) FROM $table_name"
		);

		// Get total token usage.
		$total_tokens = $wpdb->get_var(
			// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
			"SELECT SUM(token_usage) FROM $table_name"
		);

		// Get total generations.
		$total_generations = $wpdb->get_var(
			// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
			"SELECT COUNT(*) FROM $table_name"
		);

		// Get recent activity (last 7 days).
		$recent_posts = $wpdb->get_var(
			// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
			$wpdb->prepare(
				"SELECT SUM(post_count) FROM $table_name WHERE created_at >= DATE_SUB(NOW(), INTERVAL %d DAY)",
				7
			)
		);

		return array(
			'total_posts'       => (int) $total_posts,
			'total_tokens'      => (int) $total_tokens,
			'total_generations' => (int) $total_generations,
			'recent_posts'      => (int) $recent_posts,
		);
	}

	/**
	 * Debug log function.
	 *
	 * @param mixed  $message Message to log.
	 * @param string $level   Log level (info, warning, error).
	 * @return void
	 */
	public function debug_log( $message, $level = 'info' ) {
		if ( ! defined( 'WP_DEBUG' ) || ! WP_DEBUG ) {
			return;
		}

		$timestamp = current_time( 'mysql' );
		$prefix    = '[AIPG ' . strtoupper( $level ) . ']';

		if ( is_array( $message ) || is_object( $message ) ) {
			// phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_print_r
			$message = print_r( $message, true );
		}

		// phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_error_log
		error_log( "$timestamp $prefix $message" );
	}

	/**
	 * Check plugin requirements.
	 *
	 * @return bool|WP_Error True if all requirements met, WP_Error otherwise.
	 */
	public function check_requirements() {
		// Check PHP version.
		if ( version_compare( PHP_VERSION, '7.4', '<' ) ) {
			return new WP_Error(
				'php_version',
				__( 'AI Post Generator requires PHP 7.4 or higher.', 'ai-post-generator' )
			);
		}

		// Check WordPress version.
		global $wp_version;
		if ( version_compare( $wp_version, '5.8', '<' ) ) {
			return new WP_Error(
				'wp_version',
				__( 'AI Post Generator requires WordPress 5.8 or higher.', 'ai-post-generator' )
			);
		}

		// Check if wp_remote_post is available.
		if ( ! function_exists( 'wp_remote_post' ) ) {
			return new WP_Error(
				'missing_function',
				__( 'Required function wp_remote_post is not available.', 'ai-post-generator' )
			);
		}

		return true;
	}

	/**
	 * Get plugin info.
	 *
	 * @return array Plugin information.
	 */
	public function get_plugin_info() {
		return array(
			'name'    => __( 'AI Post Generator', 'ai-post-generator' ),
			'version' => AIPG_VERSION,
			'path'    => AIPG_PATH,
			'url'     => AIPG_URL,
		);
	}
}


